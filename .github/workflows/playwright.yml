name: Playwright Tests
on:
  push:
    branches: [ qa, production ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Choose functionality to test'
        default: "@prodSanity"
        type: choice
        required: false
        options:
          - "kyc"
          - "trading"
          - "login"
          - "withdrawal"
          - "verification"
          - "deposit"
          - "manageFunds"
          - "feed"
          - "settings"
          - "support"
          - "secondAccount"
          - "prodSanity"
          - "website-naga.com"
          - "debug"
          - "forgotPassword"
          - "UI"
          - "messanger"
          - "smoke"
          - "compliance"
      environment:
        description: 'Choose environment'
        default: "Prod"
        type: choice
        required: false
        options:
          - "QA"
          - "Prod"
          - "QA-Canary"
          - "Prod-Canary"
      ticket_id:
        description: 'Jira ticket ID (e.g. RG-1234)'
        type: string
  schedule:
    - cron: '30 4 * * 0-6'
    - cron: '40 5 * * 0-6'
    - cron: '30 2 * * 0-6'
    - cron: '00 3 * * 0-6'
    - cron: '40 3 * * 0-6'
    - cron: '30 6 * * 0-6'
    - cron: '00 4 * * 0-6'
    - cron: '00 2 * * 0-6'
    - cron: '05 2 * * 0-6'
    - cron: '55 8 * * 0-6'
jobs:
  test:
    timeout-minutes: 60
    #runs-on: ubuntu-latest
    runs-on: small-runner
    outputs:
      deployment_url: ${{ steps.extract_url.outputs.deployment_url }}
    steps:
    - name: Output Received values
      run: |
        echo "${{ inputs.ticket_id }} | ${{ inputs.tag }}"
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: package-lock.json
    - uses: actions/cache@v3
      id: playwright-cache
      with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          restore-keys: |
            ${{ runner.os }}-playwright-
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: 'Create env file'
      run: |
          touch .env
          echo TESTRAIL_USERNAME=${{ secrets.TESTRAIL_USERNAME }} >> .env
          echo TESTRAIL_PASSWORD=${{ secrets.TESTRAIL_PASSWORD }} >> .env
          echo USER_PASSWORD=${{ secrets.USER_PASSWORD }} >> .env
          echo NORDVPN_USERNAME=${{ secrets.NORDVPN_USERNAME }} >> .env
          echo NORDVPN_PASSWORD=${{ secrets.NORDVPN_PASSWORD }} >> .env
          echo DEVELOPMENT_CAPTCHA_BYPASS_TOKEN=${{ vars.DEVELOPMENT_CAPTCHA_BYPASS_TOKEN }} >> .env
          echo DEVELOPMENT_CANARY_CAPTCHA_BYPASS_TOKEN=${{ vars.DEVELOPMENT_CANARY_CAPTCHA_BYPASS_TOKEN }} >> .env
          echo PRODUCTION_CAPTCHA_BYPASS_TOKEN=${{ vars.PRODUCTION_CAPTCHA_BYPASS_TOKEN }} >> .env
          echo PRODUCTION_CANARY_CAPTCHA_BYPASS_TOKEN=${{ vars.PRODUCTION_CANARY_CAPTCHA_BYPASS_TOKEN }} >> .env
          echo PLAYWRIGHT_SERVICE_ACCESS_TOKEN=${{ secrets.PLAYWRIGHT_SERVICE_ACCESS_TOKEN }} >> .env
          echo PLAYWRIGHT_SERVICE_URL=${{ secrets.PLAYWRIGHT_SERVICE_URL }} >> .env
          cat .env 
    - name: Determine tags
      id: determine_tags
      run: |
              echo "Schedule: ${{ github.event.schedule }}"
              case "${{ github.event.schedule }}" in
                "30 4 * * 0-6") echo "TAGS=@prodSanity" >> $GITHUB_ENV ;;
                "40 5 * * 0-6") echo "TAGS=@website-naga.com" >> $GITHUB_ENV ;;
                "30 2 * * 0-6") echo "TAGS=@KYC" >> $GITHUB_ENV ;;
                "00 3 * * 0-6") echo "TAGS=@feed" >> $GITHUB_ENV ;;
                "40 3 * * 0-6") echo "TAGS=@manageFunds" >> $GITHUB_ENV ;;
                "30 6 * * 0-6") echo "TAGS=@trading" >> $GITHUB_ENV ;;
                "00 4 * * 0-6") echo "TAGS=@UI" >> $GITHUB_ENV ;;
                "00 2 * * 0-6") echo "TAGS=@login" >> $GITHUB_ENV ;;
                "05 2 * * 0-6") echo "TAGS=@secondAccount" >> $GITHUB_ENV ;;
                "55 8 * * 0-6") echo "TAGS=@debug" >> $GITHUB_ENV ;;
              esac
    - name: Run Playwright tests
      id: playwright_tests
      run: |
      
        CANARY="false"
        PROJECT=""
        ENV=${{ inputs.environment || 'Prod' }}
        TAGS=@${{ inputs.tag || 'prodSanity' }}
        
        if [[ "$ENV" == *"Canary"* ]]; then
          CANARY="true"
        fi

        case "$ENV" in
          "Prod"|"Prod-Canary")
            PROJECT="production"
            ;;
          "QA"|"QA-Canary")
            PROJECT="qa"
            ;;
        esac

        echo "Current ENV: $ENV"
        echo "Current TAGS: $TAGS"
        echo "GitHub Event Name: $GITHUB_EVENT_NAME"
        echo "Canary: $CANARY"
        echo "Project: $PROJECT"
 
        if [ "$GITHUB_EVENT_NAME" = "schedule" ]; then
            echo "Running schedule production tests with tag $TAGS"
            export Canary="$CANARY" 
            CRON_RUN=${{github.event_name}} npx playwright test --grep "$TAGS" --project="$PROJECT" --workers=10 --config=playwright.service.config.ts;
        elif [ "$GITHUB_EVENT_NAME" = "push" ]; then
            echo "Running production tests for tag @prodSanity due to push"
            export Canary="$CANARY" 
            CRON_RUN=${{github.event_name}} npx playwright test --grep "$TAGS" --project="$PROJECT" --workers=10 --config=playwright.service.config.ts;
        else
            echo "Running all tests with $TAGS"
            export Canary="$CANARY" 
            CRON_RUN=${{github.event_name}} npx playwright test --grep "$TAGS" --project="$PROJECT" --workers=10 --config=playwright.service.config.ts;
        fi   

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
    - name: Publish to Cloudflare Pages
      if: always()
      id: cloudflare_publish
      uses: cloudflare/pages-action@v1
      env:
        CLOUDFLARE_API_TKN: ${{ secrets.CLOUDFLARE_API_TKN }}
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TKN }}
        accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID_KWG }}
        projectName: playwright-naga-report-${{ github.head_ref || github.ref_name }}
        directory: playwright-report
        branch: master
    - name: Extract deployment URL
      if: always()
      id: extract_url
      run: |
        URL=$(echo "${{ join(steps.cloudflare_publish.outputs.*, ' ') }}" | grep -o 'https://[^ ]*' | head -n 1)
        echo "deployment_url=$URL" >> $GITHUB_ENV    
    - name: Use the URL
      if: always()
      run: |
          echo "The deployment URL is $deployment_url"
    - name: Set outcome title
      if: always()
      id: set_outcome_title
      run: |
        if [ "${{ steps.playwright_tests.outcome }}" == "success" ]; then
          echo "::set-output name=title::✅ Naga Test Passed on "
        else
          echo "::set-output name=title::❌ Naga Test Failed on "
        fi
    - name: Notify test result for dedicated teams channel
      if: always()
      uses: neonidian/teams-notify-build-status@v3
      with:
        webhookUrl: ${{ secrets.TEAMS_WEBHOOK_URL  }}   
        status: ${{ steps.playwright_tests.outcome }}  
        title: ${{ steps.set_outcome_title.outputs.title }} ${{ github.head_ref || github.ref_name }} ${{ inputs.tag }} ${{ env.TAGS }} ${{ env.ENV }}
        message: >-
            View report [${{ env.deployment_url }}](${{ env.deployment_url }})
      env:
        SHOULD_DISPLAY_VIEW_RUN_BUTTON: true
        SHOULD_DISPLAY_VIEW_COMMIT_BUTTON: true
        SHOULD_DISPLAY_ACTOR_LABEL: true
     # when trigger_type equal "jira", send a webhook request to an API and send to it the ticket_id, env.deployment_url, steps.playwright_tests.outcome, steps.set_outcome_title.outputs.title, inputs.tag
    - name: Notify test result for Jira
      if: always()
      run: |
        if [ "${{ inputs.ticket_id }}" != "" ]; then
          curl -X POST -H "Content-Type: application/json" -d '{"issues": ["${{ inputs.ticket_id }}"], "deployment_url": "${{ env.deployment_url }}", "outcome": "${{ steps.playwright_tests.outcome }}", "title": "${{ steps.set_outcome_title.outputs.title }}", "tag": "${{ inputs.tag }}"}' https://automation.atlassian.com/pro/hooks/fed5268ffa26ba4c3d60b99ca2c5bf60954af14a
        fi
