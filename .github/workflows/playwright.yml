name: Playwright Tests
on:
  push:
    branches: [ qa, production ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Choose functionality to test'
        default: "@prodSanity"
        type: choice
        required: false
        options:
          - "kyc"
          - "trading"
          - "login"
          - "withdrawal"
          - "verification"
          - "deposit"
          - "manageFunds"
          - "feed"
          - "settings"
          - "support"
          - "secondAccount"
          - "prodSanity"
          - "naga.com"
          - "debug"
          - "forgotPassword"
          - "UI"
          - "messanger"
          - "smoke"
          - "compliance"
          - "KYC_Capital"
          - "KYC_Markets"
          - "KYC_Mena"
          - "KYC_Africa"
          - "internalTransfer"
          - "autocopy"
          - "lead"
      environment:
        description: 'Choose environment'
        default: "Prod"
        type: choice
        required: false
        options:
          - "QA"
          - "Prod"
          - "QA-Canary"
          - "Prod-Canary"
      view:
        description: 'Choose emulation view'
        default: "WEB"
        type: choice
        required: false
        options:
          - "WEB"
          - "Mobile"
      ticket_id:
        description: 'Jira ticket ID (e.g. RG-1234)'
        type: string
      trigger:
        description: Shows what trigger was for launching tests
        required: false
        default: ""
        type: string
      component:
        description: Shows what component was released
        required: false
        default: ""
        type: string
      release:
        description: Number of released version
        required: false
        default: ""
        type: string
      job_url:
        description: Job url
        required: false
        default: ""
        type: string
      actor:
        description: actor who started deploy
        required: false
        default: ""
        type: string
  schedule:
    - cron: '30 4 * * 0-6'
    - cron: '20 3 * * 0-6'
    - cron: '00 2 * * 0-6'
    - cron: '30 1 * * 0-6'
    - cron: '10 1 * * 0-6'
    - cron: '30 6 * * 0-6'
    - cron: '45 0 * * 0-6'
    - cron: '05 0 * * 0-6'
    - cron: '00 1 * * 0-6'
jobs:
  test:
    timeout-minutes: 60
    #runs-on: ubuntu-latest
    runs-on: small-runner
    outputs:
      deployment_url: ${{ steps.extract_url.outputs.deployment_url }}
    steps:
    - name: Output Received values
      run: |
        echo "${{ inputs.ticket_id }} | ${{ inputs.tag }} | ${{ inputs.environment }} | ${{ inputs.view }}"
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: package-lock.json
    - uses: actions/cache@v3
      id: playwright-cache
      with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          restore-keys: |
            ${{ runner.os }}-playwright-
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: 'Create env file'
      run: |
          touch .env
          echo TESTRAIL_USERNAME=${{ secrets.TESTRAIL_USERNAME }} >> .env
          echo TESTRAIL_PASSWORD=${{ secrets.TESTRAIL_PASSWORD }} >> .env
          echo USER_PASSWORD=${{ secrets.USER_PASSWORD }} >> .env
          echo NORDVPN_USERNAME=${{ secrets.NORDVPN_USERNAME }} >> .env
          echo NORDVPN_PASSWORD=${{ secrets.NORDVPN_PASSWORD }} >> .env
          echo DEVELOPMENT_CAPTCHA_BYPASS_TOKEN=${{ vars.DEVELOPMENT_CAPTCHA_BYPASS_TOKEN }} >> .env
          echo DEVELOPMENT_CANARY_CAPTCHA_BYPASS_TOKEN=${{ vars.DEVELOPMENT_CANARY_CAPTCHA_BYPASS_TOKEN }} >> .env
          echo PRODUCTION_CAPTCHA_BYPASS_TOKEN=${{ vars.PRODUCTION_CAPTCHA_BYPASS_TOKEN }} >> .env
          echo PRODUCTION_CANARY_CAPTCHA_BYPASS_TOKEN=${{ vars.PRODUCTION_CANARY_CAPTCHA_BYPASS_TOKEN }} >> .env
          echo PLAYWRIGHT_SERVICE_ACCESS_TOKEN=${{ secrets.PLAYWRIGHT_SERVICE_ACCESS_TOKEN }} >> .env
          echo PLAYWRIGHT_SERVICE_URL=${{ secrets.PLAYWRIGHT_SERVICE_URL }} >> .env
          cat .env 
    - name: Determine tags
      id: determine_tags
      run: |
              echo "Schedule: ${{ github.event.schedule }}"
              case "${{ github.event.schedule }}" in
                "30 4 * * 0-6") echo "TAGS=@prodSanity" >> $GITHUB_ENV ;;
                "20 3 * * 0-6") echo "TAGS=@naga.com" >> $GITHUB_ENV ;;
                "00 2 * * 0-6") echo "TAGS=@KYC" >> $GITHUB_ENV ;;
                "30 1 * * 0-6") echo "TAGS=@feed" >> $GITHUB_ENV ;;
                "10 1 * * 0-6") echo "TAGS=@manageFunds" >> $GITHUB_ENV ;;
                "30 6 * * 0-6") echo "TAGS=@trading" >> $GITHUB_ENV ;;
                "45 0 * * 0-6") echo "TAGS=@UI" >> $GITHUB_ENV ;;
                "05 0 * * 0-6") echo "TAGS=@secondAccount" >> $GITHUB_ENV ;;
                "00 1 * * 0-6") echo "TAGS=@settings" >> $GITHUB_ENV ;;
              esac
    - name: Run Playwright tests
      id: playwright_tests
      run: |
        RELEASE=${{inputs.release}}
        COMPONENT=${{inputs.component}}
        TRIGGER=${{inputs.trigger}}
        ACTOR=${{inputs.actor}}

        CANARY="false"
        PROJECT=""
        VIEW=${{ inputs.view || github.event.client_payload.view || 'WEB'}}
     
        # JEnv=${{github.event.client_payload.environment}}
        # echo "jira button $JEnv"

        ENV=${{ inputs.environment || github.event.client_payload.environment || 'Prod' }}

        
        if [ -z "$TAGS" ]; then
           TAGS=@${{ inputs.tag || github.event.client_payload.tag || 'prodSanity' }}
           echo "tags from input $TAGS"
        fi

        if [[ "$ENV" == *"Canary"* ]]; then
          CANARY="true"
        fi

        if [[ "$ENV" == "Prod" || "$ENV" == "Prod-Canary" ]]; then
          PROJECT="production"
        elif [[ "$ENV" == "QA" || "$ENV" == "QA-Canary" ]]; then
          PROJECT="qa"
        fi

        if [[ "$VIEW" == "Mobile" && "$PROJECT" == "production" ]]; then 
          PROJECT="mobileProd"
        elif [[ "$VIEW" == "Mobile" && "$PROJECT" == "qa" ]]; then 
          PROJECT="mobileQA"
        fi
        
        echo "Current ENV: $ENV"
        echo "Current TAGS: $TAGS"
        echo "GitHub Event Name: $GITHUB_EVENT_NAME"
        echo "Canary: $CANARY"
        echo "Project: $PROJECT"
        echo "View: $VIEW"
        echo "TitleProject=$PROJECT" >> $GITHUB_ENV
        echo "TitleView=$VIEW" >> $GITHUB_ENV
              
        if [ "$GITHUB_EVENT_NAME" = "schedule" ]; then
            echo "Running schedule production tests with tag $TAGS"
            export ENV="$ENV" 
            echo "grep params (?=.*@web)(?=.*$TAGS)"
            CRON_RUN=${{github.event_name}} npx playwright test --grep "(?=.*@web)(?=.*$TAGS)" --project="$PROJECT" --workers=1 --config=playwright.service.config.ts | tee test-log.txt;
        elif [ "$GITHUB_EVENT_NAME" = "push" ]; then
            echo "Running production tests for tag @prodSanity due to push"
            export ENV="$ENV" 
            CRON_RUN=${{github.event_name}} npx playwright test --grep "(?=.*@web)(?=.*$TAGS)" --project="$PROJECT" --workers=1 --config=playwright.service.config.ts | tee test-log.txt;
        elif [ "$VIEW" = "Mobile" ]; then
            echo "Running Mobile view tests with $TAGS"
            export ENV="$ENV"
            CRON_RUN=${{github.event_name}} npx playwright test --grep "(?=.*@mobile)(?=.*$TAGS)" --project="$PROJECT" --workers=1 --config=playwright.service.config.ts | tee test-log.txt;
        else
            echo "Running all tests with $TAGS"
            export ENV="$ENV"
            export CANARY="$CANARY"
            CRON_RUN=${{github.event_name}} npx playwright test --grep "(?=.*@web)(?=.*$TAGS)" --project="$PROJECT" --workers=1 --config=playwright.service.config.ts | tee test-log.txt;
        fi   

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
    - name: Get report url
      id: extract_report
      run: |
        report_url=$(grep -o 'https://playwright.microsoft.com/workspaces/.*' test-log.txt | head -n 1)
        decoded_report_url=$(echo "$report_url" \
        | sed 's/%20/ /g' \
        | sed 's/%3A/:/g' \
        | sed 's/%2F/\//g' \
        | sed 's/%3F/?/g' \
        | sed 's/%3D/=/g' \
        | sed 's/%26/\&/g' \
        | sed 's/%2C/,/g' \
        | sed 's/%23/#/g' \
        | sed 's/%25/%/g' \
        | sed 's/%40/@/g' \
        | sed 's/%2B/+/g' \
        | sed 's/%5B/\[/g' \
        | sed 's/%5D/\]/g')
        
        echo "report_url=$decoded_report_url" >> $GITHUB_ENV
    - name: Set outcome title
      if: always()
      id: set_outcome_title
      run: |
        if grep -qi "failed" test-log.txt; then
          echo "title=❌ Naga Test Failed on " >> $GITHUB_ENV
          exit 1
        else
          echo "title=✅ Naga Test Passed on " >> $GITHUB_ENV
        fi
    - name: Notify test result for dedicated teams channel
      if: always()
      uses: neonidian/teams-notify-build-status@v3
      with:
        webhookUrl: ${{ secrets.TEAMS_WEBHOOK_URL  }}  
        status: ${{ steps.set_outcome_title.outcome }} 
        title: Autotests for ${{ inputs.tag || env.TAGS }} are done
        message: |
          
          * **TAGS:** ${{ inputs.tag || env.TAGS }}
          * **ENV:** ${{ env.TitleProject}}
          * **DeviceView:** ${{env.TitleView}}
          * **Trigger:** ${{inputs.trigger}}
          * **Actor:** ${{inputs.actor}}
          * **Component:** ${{inputs.component}}
          * **Release:** ${{inputs.release}}

            View report [${{ env.report_url }}](${{ env.report_url }})
      env:
        SHOULD_DISPLAY_VIEW_RUN_BUTTON: true
        SHOULD_DISPLAY_VIEW_COMMIT_BUTTON: true
        SHOULD_DISPLAY_ACTOR_LABEL: true
    # when trigger_type equal "jira", send a webhook request to an API and send to it the ticket_id, env.deployment_url, steps.playwright_tests.outcome, steps.set_outcome_title.outputs.title, inputs.tag
    - name: Notify test result for Jira
      if: always()
      run: |
        if [ "${{ inputs.ticket_id }}" != "" ]; then
          curl -X POST -H "Content-Type: application/json" -d '{"issues": ["${{ inputs.ticket_id }}"], "deployment_url": "${{ env.report_url }}", "outcome": "${{ steps.set_outcome_title.outcome }}", "title": "${{ steps.set_outcome_title.outcome }}", "tag": "${{ inputs.tag }}"}' https://automation.atlassian.com/pro/hooks/fed5268ffa26ba4c3d60b99ca2c5bf60954af14a
        fi
