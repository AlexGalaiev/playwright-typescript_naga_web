name: Playwright Tests
on:
  push:
    branches: [ qa ]
  workflow_dispatch:
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    outputs:
      deployment_url: ${{ steps.extract_url.outputs.deployment_url }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: package-lock.json
    - uses: actions/cache@v3
      id: playwright-cache
      with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          restore-keys: |
            ${{ runner.os }}-playwright-
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: 'Create env file'
      run: |
          touch .env
          echo TESTRAIL_USERNAME=${{ secrets.TESTRAIL_USERNAME }} >> .env
          echo TESTRAIL_PASSWORD=${{ secrets.TESTRAIL_PASSWORD }} >> .env
          echo USER_PASSWORD=${{ secrets.USER_PASSWORD }} >> .env
          echo TESTS_ENV=${{ secrets.TESTS_ENV }} >> .env
          cat .env       
    - name: Run Playwright tests
      id: playwright_tests
      run: npx playwright test --project=${{ github.head_ref || github.ref_name }} --workers=1
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
    - name: Publish to Cloudflare Pages
      if: always()
      id: cloudflare_publish
      uses: cloudflare/pages-action@v1
      env:
        CLOUDFLARE_API_TKN: ${{ secrets.CLOUDFLARE_API_TKN }}
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TKN }}
        accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID_KWG }}
        projectName: playwright-naga-report-qa
        directory: playwright-report
        branch: main
    - name: Extract deployment URL
      if: always()
      id: extract_url
      run: |
        URL=$(echo "${{ join(steps.cloudflare_publish.outputs.*, ' ') }}" | grep -o 'https://[^ ]*' | head -n 1)
        echo "deployment_url=$URL" >> $GITHUB_ENV    
    - name: Use the URL
      if: always()
      run: |
          echo "The deployment URL is $deployment_url"
    - name: Set outcome title
      if: always()
      id: set_outcome_title
      run: |
        if [ "${{ steps.playwright_tests.outcome }}" == "success" ]; then
          echo "::set-output name=title::✅ Naga Test Passed on "
        else
          echo "::set-output name=title::❌ Naga Test Failed on "
        fi
    - name: Notify test result for dedicated teams channel
      if: always()
      uses: neonidian/teams-notify-build-status@v3
      with:
        webhookUrl: ${{ secrets.TEAMS_WEBHOOK_URL  }}   
        status: ${{ steps.playwright_tests.outcome }}  
        title: ${{ steps.set_outcome_title.outputs.title }} ${{ github.head_ref || github.ref_name }}
        message: >-
            View report [${{ env.deployment_url }}](${{ env.deployment_url }})
      env:
        SHOULD_DISPLAY_VIEW_RUN_BUTTON: true
        SHOULD_DISPLAY_VIEW_COMMIT_BUTTON: true
        SHOULD_DISPLAY_ACTOR_LABEL: true